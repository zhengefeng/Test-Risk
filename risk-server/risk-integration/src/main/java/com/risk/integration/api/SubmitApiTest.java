package com.risk.integration.api;

import org.codehaus.jackson.map.ObjectMapper;

import javax.net.ssl.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.TreeMap;

public class SubmitApiTest {

    //final static private String apiURL = "http://localhost:8080/cpcs/api/v1/";
    final static private String apiURL = "https://test.suanhua.org/cpcs/api/v1/";//接口地址
//    final static private String apiURL2 = "http://localhost:8080/cpcs/api/v2/";//接口地址
//    final static private String apiURL2 = "http://188.188.42.42:8080/cpcs2/api/v2/";
    final static private String apiURL2 = "https://test.suanhua.org/cpcs/api/v2/";//接口地址
    final static private String orgcode = "20310103201608001";//机构号
    final static private String orgSecretKey = "co0Pq1v1Zp2P4MI";//机构API私钥
    final static private String fileDir = "D:/project/suanhua/suanhua_doc/B端系统/机构外部接口/";
    private static String charset = "utf-8";
    private static ObjectMapper mapper = new ObjectMapper();

    public static void main(String[] args)throws Throwable {
        testCredit();//个人合同信息上报
//        testRepay();//个人还款信息上报
//        testSpecTrade(); //个人异常交易信息上报
//        testGuarantee(); // 个人担保信息上报
//        testPbccrcPDF(); // 人行pdf报告
//          testPerson();  // 个人信息上报
    }

    static void testPbccrcPDF() throws IOException {
        String url = apiURL2 + "pbccrc/pdfsubmit";
        Map<String, String> param = new TreeMap<String, String>();
        param.put("sorgcode", orgcode);
        // fill in your parameters
        param.put("idNo", "");
        param.put("name", "");
        param.put("phoneNo", "");
        param.put("fileBuff
        hash(param);
        System.out.println(url);
        System.out.println(param.toString());
        String result = sendPost(url, param, "utf-8");
        System.out.println(result);

        return;
    }

    static void testPerson() throws IOException {
        String url = apiURL2 + "person/submit";
        Map<String, String> param = new TreeMap<String, String>();
        param.put("sorgcode", orgcode);

        PersonInfo[] personInfos = new PersonInfo[2];
        // 正常数据
        personInfos[0] = new PersonInfo();
        personInfos[0].setDbirthday("19831202");
        personInfos[0].setIannualincome(String.valueOf(100000L));
        personInfos[0].setIedulevel(String.valueOf(20));
        personInfos[0].setIgender(String.valueOf(1));
        personInfos[0].setImarriage(String.valueOf(30));
        personInfos[0].setSname("葛蛋3");
        personInfos[0].setSmobiletel("15917478234");
        personInfos[0].setSfirstcontacttel("15917478235");
        personInfos[0].setSfirstcontactrelation("7");
        personInfos[0].setSfirstcontactname("葛蛋33");
        personInfos[0].setSestatus("1");
        personInfos[0].setScontactaddress("上海市市辖区");
        personInfos[0].setScondition("1");
        personInfos[0].setScompanyaddress("公司地址");
        personInfos[0].setScompany("公司");
        personInfos[0].setScerttype("0");
        personInfos[0].setScertno("440520197205250035");
        personInfos[0].setIposition(String.valueOf(1));
        personInfos[0].setSaddress("居住地址");

        //异常数据
        personInfos[1] = new PersonInfo();

        param.put("data", toJsonStr(personInfos));
        hash(param);
        System.out.println(url);
        System.out.println(param.toString());
        String result = sendPost(url, param, "utf-8");
        System.out.println(result);

        return;
    }

    static void testCredit() throws IOException {
        String url = apiURL2 + "creditacct/submit";
        Map<String, String> param = new TreeMap<String, String>();
        param.put("sorgcode", orgcode);
        param.put("stype", "2");

        AcctInfo[] acctInfos = new AcctInfo[2];
        // 正常数据
        acctInfos[0] = new AcctInfo();
        acctInfos[0].setDbirthday("19831202");
        acctInfos[0].setDdateclosed("20151202");
        acctInfos[0].setDdateopened("20131202");
        acctInfos[0].setIannualincome(String.valueOf(100000L));
        acctInfos[0].setIcreditlimit(String.valueOf(10000));
        acctInfos[0].setIedulevel(String.valueOf(20));
        acctInfos[0].setIgender(String.valueOf(1));
        acctInfos[0].setIguaranteeway(String.valueOf(4));
        acctInfos[0].setImarriage(String.valueOf(30));
        acctInfos[0].setStermsfreq("06");
        acctInfos[0].setSpurpose("01");
        acctInfos[0].setSname("葛蛋");
        acctInfos[0].setSmobiletel("15917478234");
        acctInfos[0].setSfirstcontacttel("15917478235");
        acctInfos[0].setSfirstcontactrelation("7");
        acctInfos[0].setSfirstcontactname("葛蛋10");
        acctInfos[0].setSestatus("1");
        acctInfos[0].setScurrency("CNY");
        acctInfos[0].setScredittype("1");
        acctInfos[0].setScontactaddress("上海市市辖区");
        acctInfos[0].setScondition("1");
        acctInfos[0].setScompanyaddress("公司地址");
        acctInfos[0].setScompany("公司");
        acctInfos[0].setScerttype("0");
        acctInfos[0].setScertno("440520197205250035");
        acctInfos[0].setSareaname("地区名称");
        acctInfos[0].setSareacode("地区01");
        acctInfos[0].setSaccount("T2015060133");
        acctInfos[0].setIposition(String.valueOf(1));
        acctInfos[0].setSaddress("居住地址");
        acctInfos[0].setIcreditlimit(String.valueOf(1010101));


        //异常数据
        acctInfos[1] = new AcctInfo();


        param.put("data", toJsonStr(acctInfos));
        hash(param);
        System.out.println(url);
        System.out.println(param.toString());
        String result = sendPost(url, param, "utf-8");
        System.out.println(result);

        return;
    }

    static void testRepay() throws IOException {
        String url = apiURL2 + "creditrepay/submit";
        Map<String, String> param = new TreeMap<String, String>();
        param.put("sorgcode", orgcode);
        param.put("stype", "2");

        RepayInfo[] repayInfos = new RepayInfo[2];
        // 正常数据
        repayInfos[0] = new RepayInfo();
        repayInfos[0].setSaccount("T2015060133");
        repayInfos[0].setDbillingdate("20150208");
        repayInfos[0].setDrecentpaydate("20131202");
        repayInfos[0].setIaccountstat(String.valueOf(1));
        repayInfos[0].setIactualpayamount(String.valueOf(111L));
        repayInfos[0].setIbalance(String.valueOf(222L));
        repayInfos[0].setIperiodnumber(String.valueOf(6));
        repayInfos[0].setIscheduledamount(String.valueOf(333L));
        repayInfos[0].setSoverdue("1");

        //异常数据
        repayInfos[1] = new RepayInfo();
//        repayInfos[1].setSaccount("T2015060135");
//        repayInfos[1].setDbillingdate("20150208");
//        repayInfos[1].setDrecentpaydate("20131202");
//        repayInfos[1].setIaccountstat(0);
//        repayInfos[1].setIactualpayamount(0L);
//        repayInfos[1].setIbalance(0L);
//        repayInfos[1].setIperiodnumber(6);
//        repayInfos[1].setIscheduledamount(4L);
//        repayInfos[1].setSoverdue("1");

        param.put("data", toJsonStr(repayInfos));
        hash(param);
        System.out.println(url);
        System.out.println(param.toString());
        String result = sendPost(url, param, "utf-8");
        System.out.println(result);

        return;
    }

    static void testSpecTrade() throws IOException {
        String url = apiURL2 + "spectrade/submit";
        Map<String, String> param = new TreeMap<String, String>();
        param.put("sorgcode", orgcode);
        param.put("stype", "2");
        SpecRrade[] specRrades = new SpecRrade[2];
        // 正常数据
        specRrades[0] = new SpecRrade();
        specRrades[0].setName("葛蛋");
        specRrades[0].setCertno("440520197205250035");
        specRrades[0].setAccount("T000000022");
        //specRrades[0].setOrg(orgcode);
        specRrades[0].setCerttype("0");
        specRrades[0].setAddress("Address1");
        specRrades[0].setDetails("Detail1");
        specRrades[0].setPhone("13815678945");
        specRrades[0].setTradeamt(String.valueOf(100));
        specRrades[0].setTradedate("20151005");
        specRrades[0].setTradetype("5");

        //异常数据
        specRrades[1] = new SpecRrade();

        param.put("data", toJsonStr(specRrades));
        hash(param);
        System.out.println(url);
        System.out.println(param.toString());
        String result = sendPost(url, param, "utf-8");
        System.out.println(result);

        return;
    }

    static void testGuarantee() throws IOException {
        String url = apiURL2 + "creditguarantee/submit";
        Map<String, String> param = new TreeMap<String, String>();
        param.put("sorgcode", orgcode);
        param.put("stype", "2");
        GuarenteeInfo[] guarenteeInfos = new GuarenteeInfo[2];
        // 正常数据
        guarenteeInfos[0] = new GuarenteeInfo();
        guarenteeInfos[0].setSname("葛蛋");
        guarenteeInfos[0].setScertno("440520197205250035");
        guarenteeInfos[0].setSaccount("T2015060133");
        guarenteeInfos[0].setOrg(orgcode);
        guarenteeInfos[0].setScerttype("0");
        guarenteeInfos[0].setIoccursum(String.valueOf(1000));
        guarenteeInfos[0].setIstate(String.valueOf(1));

        //异常数据
        guarenteeInfos[1] = new GuarenteeInfo();
        guarenteeInfos[1].setIstate(String.valueOf(0));
        param.put("data", toJsonStr(guarenteeInfos));
        hash(param);
        System.out.println(url);
        System.out.println(param.toString());
        String result = sendPost(url, param, "utf-8");
        System.out.println(result);

        return;
    }


    static private void hash(Map<String, String> param) {
        StringBuilder sb = new StringBuilder();
        Iterator iterator = param.keySet().iterator();
        while (iterator.hasNext()) {
            sb.append(param.get(iterator.next()));
        }
        param.put("hash", md5(sb.toString() + orgSecretKey, "UTF-8").toUpperCase());
    }

    static private String md5(String msg, String charset) {
        try {
            MessageDigest digest = MessageDigest.getInstance("md5");
            byte[] hashedBytes = digest.digest(msg.getBytes(charset));
            return byts2hexstr(hashedBytes);
        } catch (NoSuchAlgorithmException   ex) {
            ex.printStackTrace();
        } catch (UnsupportedEncodingException ex){
            ex.printStackTrace();
        }
        return "";
    }

    private static String byts2hexstr(byte[] arrayBytes) {
        StringBuilder sb = new StringBuilder();
        String tmp = null;
        for (int i = 0; i < arrayBytes.length; i++) {
            tmp = Integer.toHexString(arrayBytes[i] & 0xff);
            sb.append(tmp.length() == 1 ? "0" + tmp : tmp);
        }
        return sb.toString();
    }

    public static String buildParams(Map<String, String> param, String charset) {
        if (param != null && !param.isEmpty()) {
            StringBuffer buffer = new StringBuffer();
            for (Map.Entry<String, String> entry : param.entrySet()) {
                try {
                    buffer.append(entry.getKey()).append("=")
                            .append(URLEncoder.encode(entry.getValue(), charset))
                            .append("&");
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
            }
            return buffer.deleteCharAt(buffer.length() - 1).toString();
        } else {
            return null;
        }
    }

    public static String sendPost(String url, Map<String, String> param, String charset) {
        OutputStream out = null;
        BufferedReader in = null;
        String result = "";
        try {
            URL realUrl = new URL(url);
            URLConnection conn = getConnection(realUrl);

            Map<String, String> defaultHeaders = new LinkedHashMap<>();
            defaultHeaders.put("accept", "*/*");
            defaultHeaders.put("connection", "Keep-Alive");
            defaultHeaders.put("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");

            conn.setDoOutput(true);
            conn.setDoInput(true);
            // 获取URLConnection对象对应的输出流
            out = conn.getOutputStream();
            String p = buildParams(param, charset);
            if(p != null) {
                // 发送请求参数
                out.write(p.getBytes());
                // flush输出流的缓冲
                out.flush();
            }
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(
                    conn.getInputStream(), charset));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            try {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        return result;
    }

    static public byte[] download(String url, Map<String, String> param, String savePath) {
        OutputStream out = null;
        InputStream in = null;
        String result = "";
        try {
            URL realUrl = new URL(url);
            URLConnection conn = getConnection(realUrl);

            Map<String, String> defaultHeaders = new LinkedHashMap<>();
            defaultHeaders.put("accept", "*/*");
            defaultHeaders.put("connection", "Keep-Alive");
            defaultHeaders.put("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");

            conn.setDoOutput(true);
            conn.setDoInput(true);
            // 获取URLConnection对象对应的输出流
            out = conn.getOutputStream();

            String p = buildParams(param, charset);
            if (p != null) {
                // 发送请求参数
                out.write(p.getBytes());
                // flush输出流的缓冲
                out.flush();
            }
            //读取响应数据
            in = conn.getInputStream();
            byte[] buff = new byte[1024];
            ByteArrayOutputStream baot = new ByteArrayOutputStream();
            int len;
            while ((len = in.read(buff)) != -1) {
                baot.write(buff, 0, len);
            }
            if (savePath != null) {//保存文件
                FileOutputStream fo = new FileOutputStream(savePath);
                fo.write(baot.toByteArray());
                fo.close();
            }
            return baot.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        return null;
    }

    static public HttpURLConnection getConnection(URL url) {
        HttpURLConnection connection = null;
        try{
            if(url.getProtocol().toUpperCase().startsWith("HTTPS")) {
                SSLContext ctx = SSLContext.getInstance("SSL");
                ctx.init(new KeyManager[0], new TrustManager[] {new X509TrustManager() {

                    @Override
                    public void checkClientTrusted(X509Certificate[] arg0,
                                                   String arg1) throws CertificateException {
                    }

                    @Override
                    public void checkServerTrusted(X509Certificate[] arg0,
                                                   String arg1) throws CertificateException {
                    }

                    @Override
                    public X509Certificate[] getAcceptedIssuers() {
                        return null;
                    }

                }}, new SecureRandom());


                HttpsURLConnection conn = (HttpsURLConnection)url.openConnection();
                conn.setSSLSocketFactory(ctx.getSocketFactory());
                conn.setConnectTimeout(10000);
                conn.setReadTimeout(40000);

                conn.setHostnameVerifier(new HostnameVerifier() {
                    @Override
                    public boolean verify(String hostname, SSLSession session) {
                        return true;
                    }
                });

                connection = conn;
            } else {
                connection = (HttpURLConnection) url.openConnection();
            }


        } catch(Exception e){
            e.printStackTrace();
        }

        return connection;
    }

    public static <E> E fromJsonObj(String json, Class<E> type) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            return mapper.readValue(json, type);
        } catch (Exception e) {
        }
        return null;
    }

    public static String printError(ErrorMsg[] errorMsgs) {
        StringBuilder sb = new StringBuilder();
        if(errorMsgs != null)
        {
            for (ErrorMsg err: errorMsgs)
            {
                sb.append(err.getErrCode()).append("-").append(err.getErrMsg()).append("\n");
            }
        }
        return sb.toString();
    }

    public static String getStackTrace(final Throwable throwable) {
        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw, true);
        throwable.printStackTrace(pw);
        return sw.getBuffer().toString();
    }

    public static String toJsonStr(Object obj) {
        try {
            return mapper.writeValueAsString(obj);
        } catch (Exception e) {
        }
        return null;
    }

}
